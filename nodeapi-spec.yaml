openapi: 3.0.0
info:
  title: A/B Smartly Web Console API
  version: 1.0.0
  description: An OpenAPI Specification that describes the A/B Smartly API for working with your experiments programmatically.
  contact:
    name: API Support
    email: api@absmartly.com
  license:
    name: Proprietary
externalDocs:
  description: Find out more about A/B Smartly
  url: "https://www.absmartly.com"
servers:
  - url: https://dev-1.absmartly.io/v1
security:
  - UserApiKey: []

paths:
  /experiments:
    get:
      summary: LIST Experiments
      description: "**Required Permissions**: `Experiment List` or `Experiment Admin`"
      parameters:
        - name: search
          in: query
          schema:
            type: string
            example: "call_to_action"
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: iterations_of
          in: query
          required: false
          description: The `id` of the experiment that you want to get the iterations of.
          schema:
            type: integer
        - name: owners
          in: query
          required: false
          description: An array of `user` ids to sort results by.
          schema:
            type: array
            items:
              type: integer
        - name: teams
          in: query
          required: false
          description: Array of `team` ids to sort results by.
          schema:
            type: array
            items:
              type: integer
        - name: tags
          in: query
          required: false
          description: An array of `tag` ids to sort results by.
          schema:
            type: array
            items:
              type: integer
        - name: applications
          in: query
          required: false
          description: An array of `application` ids to sort results by.
          schema:
            type: array
            items:
              type: integer
        - name: unit_types
          in: query
          required: false
          description: An array of `unit_type` ids to sort results by.
          schema:
            type: array
            items:
              type: integer
        - name: previews
          in: query
          required: false
          description: A boolean value which deliminates whether you want all experiment data or just a few specific statistics
          schema:
            enum: [0, 1]
        - name: impact
          in: query
          required: false
          description: A tuple value which allows you to specify a `from` and a `to` range of impacts to filter by. **This must be used with a preview query of `1`**
          schema:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: number
        - name: confidence
          in: query
          required: false
          description: A tuple value which allows you to specify a `from` and a `to` range of confidences to filter by. **This must be used with a preview query of `1`**
          schema:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: number
        - name: significance
          in: query
          required: false
          description: "An array of significances allowing you to filter by positive, negative or unsignificant experiments. **This must be used with a preview query of `1`**"
          schema:
            type: array
            items:
              enum: [insignificant, positive, negative]
        - name: sample_ratio_mismatch
          in: query
          required: false
          description: "A boolean value which allows you to filter for experiments with a `Sample Ratio Mismatch` alert. **This must be used with a preview query of `1`**"
          schema:
            type: boolean
        - name: cleanup_needed
          in: query
          required: false
          description: "A boolean value which allows you to filter for experiments with a `Code Cleanup Needed` alert. **This must be used with a preview query of `1`**"
          schema:
            type: boolean
        - name: audience_mismatch
          in: query
          required: false
          description: "A boolean value which allows you to filter for experiments with a `Target Audience Mismatch` alert. **This must be used with a preview query of `1`**"
          schema:
            type: boolean
        - name: sample_size_reached
          in: query
          required: false
          description: "A boolean value which allows you to filter for experiments with a `Sample Size Reached` alert. **This must be used with a preview query of `1`**"
          schema:
            type: boolean
        - name: iterations
          in: query
          required: false
          schema:
            enum: [0, 1]
        - name: sort_asc
          in: query
          required: false
          description: A boolean value which allows you to reverse the order of the experiment list
          schema:
            type: boolean
        - name: items
          in: query
          required: false
          description: An integer value which allows you to limit the number of experiments that are returned per page.
          schema:
            type: integer
        - name: page
          in: query
          required: false
          description: An integer value which represents what page of the experiments list to return
          schema:
            type: integer
      responses:
        "200":
          description: An array of all experiment objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Experiment"

    post:
      summary: POST Experiment
      description: "**Required Permissions**: `Experiment Create` or `Experiment Admin`"
      requestBody:
        description: Create an Experiment
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExperimentWritable"
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  experiment:
                    $ref: "#/components/schemas/ExperimentResponse"
                  experiment_note:
                    $ref: "#/components/schemas/ExperimentNoteResponse"
                  errors:
                    type: array
                    items: 
                      type: string
                    example: []

  /experiments/{experimentId}:
    get:
      summary: GET Experiment
      description: "**Required Permissions**: `Experiment Get` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          description: The `id` of the experiment which you want data from.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  experiment:
                    $ref: "#/components/schemas/Experiment"
    put:
      summary: EDIT Experiment
      description: "**Required Permissions**: `Experiment Edit` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          description: The `id` of the experiment which you want to edit.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: Edit an Experiment
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/ExperimentEditWritable'
                note:
                  $ref: '#/components/schemas/ExperimentNoteResponse'
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  experiment:
                    $ref: "#/components/schemas/ExperimentResponse"
                  experiment_note:
                    $ref: "#/components/schemas/ExperimentNoteResponse"
                  errors:
                    type: array
                    items: 
                      type: string
                    example: []

  /experiments/{experimentId}/start:
    put:
      summary: START Experiment
      description: "**Required Permissions**: `Experiment Start` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          description: The `id` of the experiment which you want to start.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  experiment:
                    $ref: "#/components/schemas/ExperimentResponse"
                  experiment_note:
                    $ref: "#/components/schemas/ExperimentNoteResponse"
                  errors:
                    type: array
                    items: 
                      type: string
                    example: []

  /experiments/{experimentId}/stop:
    put:
      summary: STOP Experiment
      description: "**Required Permissions**: `Experiment Stop` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          description: The `id` of the experiment which you want to stop.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  experiment:
                    $ref: "#/components/schemas/ExperimentResponse"
                  experiment_note:
                    $ref: "#/components/schemas/ExperimentNoteResponse"
                  errors:
                    type: array
                    items: 
                      type: string
                    example: []

  /experiments/{experimentId}/development:
    put:
      summary: START Experiment in Development
      description: "**Required Permissions**: `Experiment Development` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          description: The `id` of the experiment which you want to stop.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  experiment:
                    $ref: "#/components/schemas/ExperimentResponse"
                  experiment_note:
                    $ref: "#/components/schemas/ExperimentNoteResponse"
                  errors:
                    type: array
                    items: 
                      type: string
                    example: []

  /experiments/{experimentId}/full_on:
    put:
      summary: SET Experiment as Full On
      description: "**Required Permissions**: `Experiment FullOn` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          description: The `id` of the experiment which you want to set as full on.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: The variant you want to set the experiment to full on as.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_on_variant:
                  type: integer
                  example: 1
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  experiment:
                    $ref: "#/components/schemas/ExperimentResponse"
                  experiment_note:
                    $ref: "#/components/schemas/ExperimentNoteResponse"
                  errors:
                    type: array
                    items: 
                      type: string
                    example: []

  /experiments/{experimentId}/restart:
    put:
      summary: RESTART Experiment
      description: "**Required Permissions**: `Experiment Restart` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          description: The `id` of the experiment which you want to restart.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: The new data you wish to restart the experiment with.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentWritable'
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  experiment:
                    $ref: "#/components/schemas/ExperimentResponse"
                  experiment_note:
                    $ref: "#/components/schemas/ExperimentNoteResponse"
                  errors:
                    type: array
                    items: 
                      type: string
                    example: []

  /experiments/{experimentId}/archive:
    put:
      summary: ARCHIVE Experiment
      description: "**Required Permissions**: `Experiment Archive` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          description: The `id` of the experiment which you want to archive.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                archive:
                  type: boolean
                  example: true
                note:
                  type: string
      responses:
        "200":
          description: A JSON Object with experiment data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  experiment:
                    $ref: "#/components/schemas/ExperimentResponse"
                  experiment_note:
                    $ref: "#/components/schemas/ExperimentNoteResponse"
                  errors:
                    type: array
                    items: 
                      type: string
                    example: []

  /experiments/{experimentId}/activity:
    get:
      summary: GET Experiment Activity
      description: "**Required Permissions**: `Experiment Get` or `Experiment Admin`"
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: A JSON Object containing a particular experiment's activity.
          content:
            application/json:
              schema:
                type: object
                properties:
                  experiment_notes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ExperimentNote"
                  offset:
                    type: integer

  /api_keys:
    get:
      summary: LIST API Keys
      description: "**Required Permissions**: `ApiKey List` or `ApiKey Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object with an array of all created API keys.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  api_keys:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApiKey"

  /api_keys/{apiKeyId}:
    get:
      summary: GET Api Key
      description: "**Required Permissions**: `ApiKey Get` or `ApiKey Admin`"
      parameters:
        - name: apiKeyId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the API Key that you wish to get data from.
      responses:
        "200":
          description: A JSON Object a particular API key's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    $ref: "#/components/schemas/ApiKey"

  /applications:
    get:
      summary: LIST Applications
      description: "**Required Permissions**: `Application List` or `Application Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object with an array of all applications that have been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  applications:
                    type: array
                    items:
                      $ref: "#/components/schemas/Application"

  /applications/{applicationId}:
    get:
      summary: GET Application
      description: "**Required Permissions**: `Application Get` or `Application Admin`"
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Application that you wish to get data from.
      responses:
        "200":
          description: A JSON Object an application's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  application:
                    $ref: "#/components/schemas/Application"

  /cors:
    get:
      summary: LIST CORS Allowed Origins
      description: "**Required Permissions**: `CorsAllowedOrigin List` or `CorsAllowedOrigin Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all CORS Allowed Origins.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  cors_allowed_origins:
                    type: array
                    items:
                      $ref: "#/components/schemas/CORS"

  /cors/{corsId}:
    get:
      summary: GET CORS Allowed Origin
      description: "**Required Permissions**: `CorsAllowedOrigin Get` or `CorsAllowedOrigin Admin`"
      parameters:
        - name: corsId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the CORS Allowed Origin that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a single CORS Allowed Origin's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cors_allowed_origin:
                    $ref: "#/components/schemas/CORS"

  /environments:
    get:
      description: "**Required Permissions**: `Environment List` or `Environment Admin`"
      summary: LIST Environments
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all created environments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  environments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Environment"

  /environments/{environmentId}:
    get:
      summary: GET Environment
      description: "**Required Permissions**: `Environment Get` or `Environment Admin`"
      parameters:
        - name: environmentId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Environment that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a single environment's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  environment:
                    $ref: "#/components/schemas/Environment"

  /experiment_annotations:
    get:
      summary: LIST Experiment Annotations
      description: "**Required Permissions**: `Annotation List` or `Annotation Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
        - name: experiment_id
          in: query
          required: false
          schema:
            type: integer
          description: Filter experiment annotations by `experiment_id`
      responses:
        "200":
          description: A JSON Object containing an array of all experiment annotations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  experiment_annotations:
                    type: array
                    items:
                      $ref: "#/components/schemas/ExperimentAnnotation"

  /experiment_annotations/{experimentAnnotationId}:
    get:
      summary: GET Experiment Annotation
      description: "**Required Permissions**: `Annotation Get` or `Annotation Admin`"
      parameters:
        - name: experimentAnnotationId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Experiment Annotation that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing an experiment annotation's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  experiment_annotation:
                    $ref: "#/components/schemas/ExperimentAnnotation"

  /experiment_tags:
    get:
      summary: LIST Experiment Tags
      description: "**Required Permissions**: `Experiment List` or `Experiment Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all experiment tags.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  experiment_tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/ExperimentTag"

  /experiment_tags/{experimentTagId}:
    get:
      summary: GET Experiment Tag
      description: "**Required Permissions**: `Experiment Get` or `Experiment Admin`"
      parameters:
        - name: experimentTagId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Experiment Tag that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing an experiment tag's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  experiment_tag:
                    $ref: "#/components/schemas/ExperimentTag"

  /goal_tags:
    get:
      summary: LIST Goal Tags
      description: "**Required Permissions**: `Goal List` or `Goal Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all goal tags.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  goal_tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/GoalTag"

  /goal_tags/{goalTagId}:
    get:
      summary: GET Goal Tag
      description: "**Required Permissions**: `Goal Get` or `Goal Admin`"
      parameters:
        - name: goalTagId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Goal Tag that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a goal tag's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  goal_tag:
                    $ref: "#/components/schemas/GoalTag"

  /goals:
    get:
      summary: LIST Goals
      description: "**Required Permissions**: `Goal List` or `Goal Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all goals.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  goals:
                    type: array
                    items:
                      $ref: "#/components/schemas/Goal"

  /goals/{goalId}:
    get:
      summary: GET Goal
      description: "**Required Permissions**: `Goal Get` or `Goal Admin`"
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Goal that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a goal's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  goal:
                    $ref: "#/components/schemas/Goal"

  /metric_tags:
    get:
      summary: LIST Metric Tags
      description: "**Required Permissions**: `Metric List` or `Metric Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all metrics tags.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  metric_tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/MetricTag"

  /metric_tags/{metricTagId}:
    get:
      summary: GET Metric Tag
      description: "**Required Permissions**: `Metric Get` or `Metric Admin`"
      parameters:
        - name: metricTagId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Metric Tag that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a metric tag's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  metric_tag:
                    $ref: "#/components/schemas/MetricTag"

  /metrics:
    get:
      summary: LIST Metrics
      description: "**Required Permissions**: `Metric List` or `Metric Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
        - name: owners
          in: query
          schema:
            type: string
            pattern: ^,+
          required: false
          description: A list of owner_ids for filtering, separated by commas.
          example: "1,2,3"
        - name: teams
          in: query
          schema:
            type: string
            pattern: ^,+
          required: false
          description: A list of team_ids for filtering, separated by commas.
          example: "1,2,3"
      responses:
        "200":
          description: A JSON Object containing an array of all metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                    example: 1
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                    example: 1
                  metrics:
                    type: array
                    items:
                      $ref: "#/components/schemas/Metric"

  /metrics/{metricId}:
    get:
      summary: GET Metric
      description: "**Required Permissions**: `Metric Get` or `Metric Admin`"
      parameters:
        - name: metricId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the metric that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a metric's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  metric:
                    $ref: "#/components/schemas/Metric"

  /permission_categories:
    get:
      summary: LIST Permission Categories
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all permission categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  permission_categories:
                    type: array
                    items:
                      $ref: "#/components/schemas/PermissionCategories"

  /permissions:
    get:
      summary: LIST Permissions
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all permissions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Permission"

  /roles:
    get:
      summary: LIST Roles
      description: "**Required Permissions**: `Role List` or `Role Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all roles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  roles:
                    type: array
                    items:
                      $ref: "#/components/schemas/Role"

  /roles/{roleId}:
    get:
      summary: GET Role
      description: "**Required Permissions**: `Role Get` or `Role Admin`"
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Role that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a role's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    $ref: "#/components/schemas/Role"

  /segments:
    get:
      summary: LIST Segments
      description: "**Required Permissions**: `Segment List` or `Segment Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all segments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  segments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Segment"

  /segments/{segmentId}:
    get:
      summary: GET Segment
      description: "**Required Permissions**: `Segment Get` or `Segment Admin`"
      parameters:
        - name: segmentId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Segment that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a segment's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  segment:
                    $ref: "#/components/schemas/Segment"

  /teams:
    get:
      summary: LIST Teams
      description: "**Required Permissions**: `Team List` or `Team Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all teams.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"

  /teams/{teamId}:
    get:
      summary: GET Team
      description: "**Required Permissions**: `Team Get` or `Team Admin`"
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Team that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a team's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  team:
                    $ref: "#/components/schemas/Team"

  /unit_types:
    get:
      summary: LIST Units
      description: "**Required Permissions**: `UnitType List` or `UnitType Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all units.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  unit_types:
                    type: array
                    items:
                      $ref: "#/components/schemas/UnitType"

  /unit_types/{unitTypeId}:
    get:
      summary: GET Unit
      description: "**Required Permissions**: `UnitType Get` or `UnitType Admin`"
      parameters:
        - name: unitTypeId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Unit that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a unit's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  unit_type:
                    $ref: "#/components/schemas/UnitType"

  /users:
    get:
      summary: LIST Users
      description: "**Required Permissions**: `User List` or `User Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"

  /users/{userId}:
    get:
      summary: GET User
      description: "**Required Permissions**: `User Get` or `User Admin`"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the User that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a user's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"

  /users/{userId}/api_keys:
    get:
      summary: GET User API keys
      description: "**Required Permissions**: `User Get` or `User Admin`"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the User that you wish to get the API Keys of.
      responses:
        "200":
          description: A JSON Object containing an array of all API keys that are linked to a user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  user_api_keys:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApiKey"

  /webhook_events:
    get:
      summary: LIST Webhook Events
      description: "**Required Permissions**: `Webhook List` or `Webhook Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all webhook events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  webhook_events:
                    type: array
                    items:
                      $ref: "#/components/schemas/WebhookEvent"

  /webhooks:
    get:
      summary: LIST Webhooks
      description: "**Required Permissions**: `Webhook List` or `Webhook Admin`"
      parameters:
        - name: sort
          in: query
          description: The object key to sort the results by.
          schema:
            type: string
            example: name
        - name: sort_asc
          in: query
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: items
          in: query
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A JSON Object containing an array of all webhooks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: integer
                  page:
                    type: integer
                    minimum: 1
                  total:
                    type: integer
                  webhooks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Webhook"

  /webhooks/{webhookId}:
    get:
      summary: GET Webhook
      description: "**Required Permissions**: `Webhook Get` or `Webhook Admin`"
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: integer
          description: The id of the Webhook that you wish to get data from.
      responses:
        "200":
          description: A JSON Object containing a webhook's data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: "#/components/schemas/Webhook"

components:
  securitySchemes:
    UserApiKey:
      type: apiKey
      in: header
      description: A User API Key for API authorization. **Must be in the format "Api-Key your_user_api_key"**
      name: Authorization
  schemas:
    ExperimentResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: test_experiment
        iteration:
          type: integer
          minimum: 1
        state:
          type: string
          example: running
        development_at:
          type: string
          format: date-time
          nullable: true
        start_at:
          type: string
          format: date-time
          nullable: true
        stop_at:
          type: string
          format: date-time
          nullable: true
          example: null
        full_on_at:
          nullable: true
          type: string
          format: date-time
          example: null
        full_on_variant:
          nullable: true
          type: integer
          minimum: 0
          maximum: 3
        last_seen_in_code_at:
          type: string
          format: date-time
          nullable: true
        nr_variants:
          type: integer
          maximum: 3
          minimum: 1
          example: 3
        percentages:
          type: string
          pattern: '\d{2}\/\d{2}\/\d{2}'
          example: 34/33/33
          nullable: true
        percentage_of_traffic:
          type: integer
          example: 100
        seed:
          type: string
          format: bigint
        traffic_seed:
          type: string
          format: bigint
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
          minimum: 1
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by_user_id:
          type: integer
          minimum: 1
          nullable: true
        description:
          type: string
          example: This experiment's description
        unit_type_id:
          type: integer
          example: 1
        primary_metric_id:
          type: integer
          example: 20
        audience:
          type: string
          pattern: '\{"filter":{and:\[]}}'
        audience_strict:
          type: boolean
          example: false
        hypothesis:
          type: string
        prediction:
          type: string
        action_points:
          type: string
        implementation_details:
          type: string
        other:
          type: string
        minimum_detectable_effect:
          type: integer
          example: 10
          nullable: true
        archived:
          type: boolean
          example: false
        split:
          type: array
          items: 
            type: number
            example: [0.5, 0.5]
        
    Experiment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: test_experiment
        iteration:
          type: integer
          minimum: 1
        state:
          type: string
          example: running
        development_at:
          type: string
          format: date-time
          nullable: true
        start_at:
          type: string
          format: date-time
          nullable: true
        stop_at:
          type: string
          format: date-time
          nullable: true
          example: null
        full_on_at:
          nullable: true
          type: string
          format: date-time
        full_on_variant:
          nullable: true
          type: integer
          minimum: 0
          maximum: 3
        last_seen_in_code_at:
          type: string
          format: date-time
          nullable: true
        nr_variants:
          type: integer
          maximum: 3
          minimum: 1
          example: 3
        percentages:
          type: string
          pattern: '\d{2}\/\d{2}\/\d{2}'
          example: 34/33/33
          nullable: true
        percentage_of_traffic:
          type: integer
          example: 100
        seed:
          type: string
          format: bigint
        traffic_seed:
          type: string
          format: bigint
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
        created_by_user_id:
          type: integer
          minimum: 1
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by:
          $ref: "#/components/schemas/User"
        updated_by_user_id:
          type: integer
          minimum: 1
          nullable: true
        description:
          type: string
          example: This experiment's description
        unit_type:
          $ref: "#/components/schemas/UnitType"
        unit_type_id:
          type: integer
          example: 1
        primary_metric:
          $ref: "#/components/schemas/Metric"
        primary_metric_id:
          type: integer
          example: 20
        audience:
          type: string
          pattern: '\{"filter":{and:\[]}}'
        audience_strict:
          type: boolean
          example: false
        hypothesis:
          type: string
        prediction:
          type: string
        action_points:
          type: string
        implementation_details:
          type: string
        other:
          type: string
        minimum_detectable_effect:
          type: integer
          example: 10
          nullable: true
        archived:
          type: boolean
          example: false
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentApplication"
        variants:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentVariant"
        secondary_metrics:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentSecondaryMetric"
        previews:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentPreview"
        preview_variants:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentVariantPreview"
        teams:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentTeam"
        owners:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentOwner"
        experiment_tags:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentExperimentTag"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentNote"
        new_experiment_notes:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentNote"
        favorited_users:
          type: array
          items:
            $ref: "#/components/schemas/UserFavoriteExperiment"
        alerts:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentAlert"
        sample_size:
          nullable: true
          $ref: "#/components/schemas/ExperimentSampleSize"
        variant_screnshots:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentVariantScreenshot"

    ExperimentVariantScreenshot:
      type: object
      properties:
        experiment_id:
          type: integer
          example: 1
        variant:
          type: integer
          example: 2
        screenshot_file_upload_id:
          type: integer
          example: 14
        label:
          type: string
          example: Variant C's second iteration
        experiment:
          $ref: "#/components/schemas/Experiment"
        file_upload:
          $ref: "#/components/schemas/FileUpload"

    FileUsage:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        cropped:
          type: boolean
          example: false
        resize_on_demand:
          type: boolean
          example: false
        file_uploads:
          type: array
          items:
            $ref: "#/components/schemas/FileUpload"

    FileUpload:
      type: object
      properties:
        id:
          type: integer
        file_usage:
          $ref: "#/components/schemas/FileUsage"
        file_usage_id:
          type: integer
        width:
          type: integer
          example: 1080
        height:
          type: integer
          example: 720
        file_size:
          type: integer
        file_name:
          type: string
          example: avatar_john_doe.png
        content_type:
          type: string
          example: image/png
        base_url:
          type: string
          format: url
        crop_left:
          type: number
          format: float
        crop_top:
          type: number
          format: float
        crop_width:
          type: number
          format: float
        crop_height:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
        created_by_user_id:
          type: integer
        avatar_users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        variant_screenshots:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentVariantScreenshot"

    ExperimentTag:
      type: object
      properties:
        id:
          type: integer
        tag:
          type: string
          example: stack:backend
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by:
          nullable: true
          $ref: "#/components/schemas/User"
        updated_by_user_id:
          nullable: true
          type: integer
        experiments:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentExperimentTag"

    Team:
      type: object
      properties:
        id:
          type: integer
        external_id:
          nullable: true
          type: integer
        name:
          type: string
          example: "Marketing"
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
        created_by_user_id:
          type: integer
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by:
          nullable: true
          $ref: "#/components/schemas/User"
        updated_by_user_id:
          type: integer
          nullable: true
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserTeam"
        experiments:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentTeam"
        goals:
          type: array
          items:
            $ref: "#/components/schemas/GoalTeam"
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/MetricTeam"

    UserTeam:
      type: object
      properties:
        user_id:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        team_id:
          type: integer
        team:
          $ref: "#/components/schemas/Team"

    GoalTeam:
      type: object
      properties:
        goal_id:
          type: integer
        goal:
          $ref: "#/components/schemas/Goal"
        team_id:
          type: integer
        team:
          $ref: "#/components/schemas/Team"

    MetricTeam:
      type: object
      properties:
        metric_id:
          type: integer
        metric:
          $ref: "#/components/schemas/Metric"
        team_id:
          type: integer
        team:
          $ref: "#/components/schemas/Team"

    Goal:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: purchase
        description:
          type: string
          example: A goal for tracking how many purchases are made on any of our applications
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
        created_by_user_id:
          type: integer
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by:
          nullable: true
          $ref: "#/components/schemas/User"
        updated_by_user_id:
          type: integer
          nullable: true
        archived:
          type: boolean
          example: false
        tags:
          type: array
          items:
            $ref: "#/components/schemas/GoalGoalTag"
        teams:
          type: array
          items:
            $ref: "#/components/schemas/GoalTeam"
        owners:
          type: array
          items:
            $ref: "#/components/schemas/GoalOwner"
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/Metric"

    GoalGoalTag:
      type: object
      properties:
        goal_id:
          type: integer
        goal:
          $ref: "#/components/schemas/Goal"
        goal_tag_id:
          type: integer
        goal_tag:
          $ref: "#/components/schemas/GoalTag"

    GoalOwner:
      type: object
      properties:
        goal:
          $ref: "#/components/schemas/Goal"
        goal_id:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        user_id:
          type: integer

    GoalTag:
      type: object
      properties:
        id:
          type: integer
        tag:
          type: string
          example: psychological:Trust
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by:
          nullable: true
          $ref: "#/components/schemas/User"
        updated_by_user_id:
          type: integer
          nullable: true
        goals:
          type: array
          items:
            $ref: "#/components/schemas/GoalGoalTag"

    ExperimentSampleSize:
      type: object
      properties:
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          nullable: true
        required_sample_size:
          type: integer
          format: bigint
          example: 109234
        reached_at:
          type: string
          format: date-time
          nullable: true
          example: null
        reached_at_sample_size:
          type: integer
          format: bigint
          nullable: true
          example: null

    ExperimentPreview:
      type: object
      properties:
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        environment_type:
          enum: [development, production]
        unit_count:
          type: integer
          format: bigint
        first_exposure_at:
          nullable: true
          type: string
          format: date-time
        last_exposure_at:
          nullable: true
          type: string
          format: date-time
        data_cutoff_at:
          nullable: true
          type: string
          format: date-time
        updated_at:
          nullable: true
          type: string
          format: date-time

    ExperimentNoteResponse:
      type: object
      properties:
        id:
          type: integer
        reply_to_note_id:
          type: integer
          nullable: true
          example: null
        experiment_id:
          type: integer
        action:
          enum:
            [
              create,
              development,
              start,
              restart,
              edit,
              stop,
              full_on,
              comment,
              archive,
              unarchive,
            ]
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by_user_id:
          type: integer
          nullable: true
        note:
          type: string
          nullable: true
        variant:
          type: integer
          nullable: true
        new_experiment_id:
          nullable: true
          type: integer
        created_by:
          $ref: "#/components/schemas/User"
        updated_by:
          $ref: "#/components/schemas/User"
          nullable: true
          example: null

    ExperimentNote:
      type: object
      properties:
        id:
          type: integer
        reply_to:
          $ref: "#/components/schemas/ExperimentNote"
          nullable: true
          example: null
        reply_to_note_id:
          type: integer
          nullable: true
          example: null
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        action:
          enum:
            [
              create,
              development,
              start,
              restart,
              edit,
              stop,
              full_on,
              comment,
              archive,
              unarchive,
            ]
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
        created_by_user_id:
          type: integer
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by:
          $ref: "#/components/schemas/User"
          nullable: true
        updated_by_user_id:
          type: integer
          nullable: true
        note:
          type: string
          nullable: true
        variant:
          type: integer
          nullable: true
        new_experiment:
          $ref: "#/components/schemas/Experiment"
          nullable: true
        new_experiment_id:
          nullable: true
          type: integer
        reply_to_experiment_note:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentNote"

    ExperimentAlert:
      type: object
      properties:
        id:
          type: integer
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        type:
          enum:
            [
              cleanup_needed,
              audience_mismatch,
              sample_size_reached,
              sample_ratio_mismatch,
            ]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: string
          nullable: true

    ExperimentVariantPreview:
      type: object
      properties:
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        metric:
          $ref: "#/components/schemas/Metric"
        metric_id:
          type: integer
        environment_type:
          enum: [development, production]
        variant:
          type: integer
          maximum: 3
        unit_count:
          type: integer
          format: bigint
        first_exposure_at:
          nullable: true
          type: string
          format: date-time
        last_exposure_at:
          nullable: true
          type: string
          format: date-time
        value:
          type: number
          format: decimal
        mean:
          type: number
          format: decimal
        variance:
          type: number
          format: decimal
        pvalue:
          nullable: true
          type: number
          format: float
        impact:
          nullable: true
          type: number
          format: float
        impact_lower:
          nullable: true
          type: number
          format: float
        impact_upper:
          nullable: true
          type: number
          format: float

    ExperimentApplication:
      type: object
      properties:
        experiment:
          $ref: "#/components/schemas/Experiment"
        application:
          $ref: "#/components/schemas/Application"
        experiment_id:
          type: integer
        application_id:
          type: integer
        application_version:
          type: integer
          format: bigint

    Application:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: ios
        description:
          type: string
          example: Our iOS app
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/User"
        created_by_user_id:
          type: integer
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by:
          $ref: "#/components/schemas/User"
          nullable: true
        updated_by_user_id:
          nullable: true
          type: integer
        archived:
          type: boolean
          example: false
        experiments:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentApplication"

    ExperimentTeam:
      type: object
      properties:
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        team:
          $ref: "#/components/schemas/Team"
        team_id:
          type: integer

    ExperimentOwner:
      type: object
      properties:
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        user_id:
          type: integer

    ExperimentExperimentTag:
      type: object
      properties:
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        experiment_tag:
          $ref: "#/components/schemas/ExperimentTag"
        experiment_tag_id:
          type: integer

    User:
      type: object
      properties:
        archived:
          type: boolean
          example: false
        avatar:
          type: object
          nullable: true
        avatar_file_upload_url:
          type: string
          example: /cropUrl/100x100/1.png
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
          minimum: 1
        department:
          type: string
          example: Marketing
        email:
          type: string
          format: email

    UserFavoriteExperiment:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        user_id:
          type: integer
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        created_at:
          type: string
          format: date-time

    UnitType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: user_id
        description:
          type: string
          example: The ids of our users
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        created_by:
          $ref: "#/components/schemas/User"
        archived:
          type: boolean
          example: false

    Metric:
      type: object
      properties:
        id:
          type: integer
        goal_id:
          type: integer
          example: 70
        name:
          type: string
          example: Time to Book
        description:
          type: string
          example: The amount of time before a booking has been made
        type:
          type: string
          example: "goal_time_to_achievement"
        effect:
          type: string
          enum: [positive, negative, unknown]
        archived:
          type: boolean
          example: false
        format_str:
          type: string
          example: "{}s"
        scale:
          type: integer
          example: 1
        precision:
          type: number
          example: 0
        value_source_property:
          type: string
          example: ""
        property_filter:
          type: string
          example: ""
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
          example: 1
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        goal:
          $ref: "#/components/schemas/Goal"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/MetricTag"
        owners:
          type: array
          items:
            $ref: "#/components/schemas/MetricOwner"
        teams:
          type: array
          items:
            $ref: "#/components/schemas/MetricTeam"

    MetricOwner:
      type: object
      properties:
        metric_id:
          type: integer
        user_id:
          type: integer
        user:
          $ref: "#/components/schemas/User"

    ExperimentVariant:
      type: object
      properties:
        config:
          type: string
          example: ""
        experiment_id:
          type: integer
          example: 1
        name:
          type: string
          example: Red Button
        variant:
          type: integer
          minimum: 0
          maximum: 3

    ExperimentSecondaryMetric:
      type: object
      properties:
        experiment:
          $ref: "#/components/schemas/Experiment"
        experiment_id:
          type: integer
        metric:
          $ref: "#/components/schemas/Metric"
        metric_id:
          type: integer

    ExperimentEditWritable:
      type: object
      properties:
        name:
          type: string
          example: experiment_name
        iteration:
          type: integer
          minimum: 2
        percentage_of_traffic:
          type: integer
          example: 100
        description:
          type: string
          example: An experiment into whether changing our cta_button to red will effect our monthly revenue
        owners:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableOwner"
        teams:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableTeam"
        experiment_tags:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableTag"
        hypothesis:
          type: string
        prediction:
          type: string
        action_points:
          type: string
        audience:
          type: string
        implementation_details:
          type: string
        other:
          type: string
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableApplication"
        secondary_metrics:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableMetric"
        exploratory_metrics:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableMetric"
        guardrail_metrics:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableMetric"
        variant_screenshots:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentVariantScreenshotWritable"

    ExperimentWritable:
      type: object
      properties:
        name:
          type: string
          example: experiment_name
        iteration:
          type: integer
          minimum: 1
        state:
          enum: ["created", "development", "running", "stopped", "draft", "ready"]
        nr_variants:
          type: integer
          example: 1
        percentages:
          type: string
          example: 34/33/33
        percentage_of_traffic:
          type: integer
          example: 100
        description:
          type: string
          example: An experiment into whether changing our cta_button to red will effect our monthly revenue
        unit_type:
          $ref: "#/components/schemas/ExperimentWritableUnitType"
        owners:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableOwner"
        teams:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableTeam"
        experiment_tags:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableTag"
        hypothesis:
          type: string
        prediction:
          type: string
        action_points:
          type: string
        audience:
          type: string
        audience_strict:
          type: boolean
          example: true
        implementation_details:
          type: string
        other:
          type: string
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableApplication"
        primary_metric:
          $ref: "#/components/schemas/ExperimentWritableMetric"
        secondary_metrics:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableMetric"
        exploratory_metrics:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableMetric"
        guardrail_metrics:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentWritableMetric"
        variants:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentVariant"
        variant_screenshots:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentVariantScreenshotWritable"
        minimum_detectable_effect:
          nullable: true
          type: string

    ExperimentWritableUnitType:
      type: object
      properties:
        unit_type_id:
          type: integer

    ExperimentWritableOwner:
      type: object
      properties:
        user_id:
          type: integer

    ExperimentWritableTeam:
      type: object
      properties:
        team_id:
          type: integer

    ExperimentWritableTag:
      type: object
      properties:
        experiment_tag_id:
          type: integer

    ExperimentWritableApplication:
      type: object
      properties:
        application_id:
          type: integer
        application_version:
          type: string

    ExperimentWritableMetric:
      type: object
      properties:
        metric_id:
          type: integer

    ExperimentVariantScreenshotWritable:
      type: object
      properties:
        variant:
          type: integer
        label:
          type: string
        file_upload:
          $ref: "#/components/schemas/FileUploadWritable"

    FileUploadWritable:
      type: object
      properties:
        data:
          type: string
        content_type:
          type: string
          example: image/png
        file_name:
          type: string
          example: headshot.png
        file_size:
          type: integer
        width:
          type: integer
          example: 500
        height:
          type: integer
          example: 500
        crop_left:
          type: integer
        crop_top:
          type: integer
        crop_width:
          type: integer
        crop_height:
          type: integer
        temp_url:
          nullable: true
          type: string
          format: url

    ApiKey:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: All CRUD API Key
        description:
          type: string
          example: An API key with all permissions
        key:
          type: string
          format: uuid
        permissions:
          type: string
          pattern: "create,edit,delete,read"
        used_at:
          nullable: true
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        created_by:
          $ref: "#/components/schemas/User"

    CORS:
      type: object
      properties:
        id:
          type: integer
        type:
          enum: [regex, specific]
          example: specific
        origin:
          type: string
          format: url
        description:
          type: string
          example: Our homepage
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        created_by:
          $ref: "#/components/schemas/User"

    Environment:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Sandbox
        description:
          type: string
          example: Our sandbox environment.
        type:
          enum: [development, production]
        archived:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        created_by:
          $ref: "#/components/schemas/User"
        updated_by:
          nullable: true
          $ref: "#/components/schemas/User"

    ExperimentAnnotation:
      type: object
      properties:
        id:
          type: integer
        timestamp:
          type: string
          format: date-time
        description:
          type: string
          example: This was just after a successful marketing campaign
        color:
          type: string
          pattern: ^#[A-Fa-f0-9]{6}
          example: "#CFC8FF"
        type:
          enum: [local, global]
        experiment_id:
          type: integer
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        created_by:
          $ref: "#/components/schemas/User"
        updated_by:
          nullable: true
          $ref: "#/components/schemas/User"

    MetricTag:
      type: object
      properties:
        id:
          type: integer
        tag:
          type: string
          example: location:Header
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer

    PermissionCategories:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"

    Permission:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        category_id:
          type: integer

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Admin
        description:
          type: string
          example: A role with all permissions except user CRUD
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        deletable:
          type: boolean
        default_user_role:
          type: boolean
          example: false
        full_admin_role:
          type: boolean
          example: false
        permissions:
          type: array
          items:
            type: object
            properties:
              permission_id:
                type: integer
              role_id:
                type: integer
              permission:
                $ref: "#/components/schemas/Permission"
        created_by:
          $ref: "#/components/schemas/User"

    Segment:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Language
        description:
          type: string
          example: The user's language
        value_source_attribute:
          type: string
          example: language
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        created_by:
          $ref: "#/components/schemas/User"

    WebhookEvent:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: ExperimentCreated
        description:
          type: string
          example: Event generated when an experiment draft is created.

    Webhook:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Slack
        description:
          type: string
          example: Our connection between experiments and Slack
        url:
          type: string
          format: url
        enabled:
          type: boolean
          example: true
        ordered:
          type: boolean
          example: false
        max_retries:
          type: integer
          example: 10
        created_at:
          type: string
          format: date-time
        created_by_user_id:
          type: integer
        updated_at:
          nullable: true
          type: string
          format: date-time
        updated_by_user_id:
          nullable: true
          type: integer
        created_by:
          $ref: "#/components/schemas/User"
        events:
          type: array
          items:
            type: object
            properties:
              webhook_id:
                type: integer
              webhook_event_id:
                type: integer
              enabled:
                type: boolean
              event:
                $ref: "#/components/schemas/WebhookEvent"
